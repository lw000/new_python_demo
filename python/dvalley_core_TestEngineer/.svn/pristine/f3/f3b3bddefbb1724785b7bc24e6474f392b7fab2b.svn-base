#!/usr/bin/env python
# -*- coding=utf-8 -*-

'''
Created on 2018年05月31日

@author: Administrator
'''

import demjson
import requests
import grequests
import logging
import time
import utils
     
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [pid:%(process)s] %(levelname)s %(message)s %(filename)s[line:%(lineno)d]',
                    datefmt='%Y-%m-%d %H:%M:%S')
   
def __execpt_handler(req, exception):
    print('Request failed')
         
class BaseApi(object):
       
    def __init__(self, debug = 0):
        self._debug = debug
        
        if self._debug == 0:
            self.server_url = 'http://api.klgwl.com'
        else:
            self.server_url = 'http://120.78.182.253:8181'
            
        self.login_result_data = {}
          
    def __prepareParams(self, token, params):
        commonParams = dict(app_version='3.0.1', client_type='pc', lang='1')
        postParams = {}
        postParams.update(commonParams)
        if (token != None):
            postParams['token'] = token
            
        if (params != None):
            postParams.update(params)
            
        postData = utils.webSignWithJson(demjson.encode(postParams))
        
#         log.debug(postData)
        
        payload = demjson.decode(postData)
        
        return payload
     
    def _post(self, method, token, params):
        url = self.server_url + method
        payload = self.__prepareParams(token, params)
        
        t1 = time.time()
        r = requests.post(url, data=payload)
        t2 = time.time()      
        logging.debug('%s [%f]' % (r.url, t2-t1))
        
#         logging.debug(r.headers)
#         logging.debug(r.text)
#         logging.debug(r.json())
        return r.status_code, demjson.decode(r.text)
    
    def _batchPost(self, method, token, params, count):     
        rs = []
        for _ in range(count):
            code, data = self._post(method, token, params)
            rs.append((code, data))        
        return rs
     
    def _asyncPost(self, method, token, params):
        url = self.server_url + method    
        payload = self.__prepareParams(token, params)
        
        t1 = time.time()
        urls = [url]
        r = (grequests.post(url, data=payload) for u in urls)
        data = grequests.map(r)
        t2 = time.time()
        
        logging.debug('time: %f' % (t2-t1))
        
        for v in data:
            print(v)
            print(v.url)
            print(v.headers)
            print(v.text)
            print(v.json())
                     
        return data
    
    def _get(self, url, params):   
        r = requests.get(url, params)
        print(r.url)
        print(r.text)
        
        return r
    
    def updateLoginResultData(self, data):
        self.login_result_data = data
