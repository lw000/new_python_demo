#!/usr/bin/env python
# -*- coding=utf-8 -*-

'''
Created on 2018年05月31日

@author: Administrator
'''

import logging
import utils

from api_base import BaseApi
from api_user import UserApi
from api_discuss import DiscussApi
from api_setting import SettingApi
from api_area import AreaApi
from api_social import SocialApi

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [pid:%(process)s] %(levelname)s %(message)s %(filename)s[line:%(lineno)d]',
                    datefmt='%Y-%m-%d %H:%M:%S')
      
class TesterApi(BaseApi):
    def __init__(self, debug=0, account=None, pwd=None):
        super(TesterApi, self).__init__(debug=debug)
        self.__account = account
        self.__pwd = pwd
        self.__api_module = []
        self.__registerApiTesterModule()
        
    def login(self):
        ok = self.__post_user_login('/user/login')
        return ok
    
    def start(self):
        for _, v in enumerate(self.__api_module):
            v.start()
        
        self.__post_upload_getToken('/upload/getToken')
                        
    def stop(self):
        for _, v in enumerate(self.__api_module):
            v.stop()
    
    @property
    def account(self):
        return self.__account
    
    @account.setter
    def account(self, account):
        self.__account = account
        
    @property
    def pwd(self):
        return self.__pwd
     
    @pwd.setter
    def pwd(self, pwd):
        self.__pwd = pwd    
        
    def __registerApiTesterModule(self):   
        self.__api_module.append(UserApi(self._debug))
        self.__api_module.append(DiscussApi(self._debug))
        self.__api_module.append(SettingApi(self._debug))
        self.__api_module.append(AreaApi(self._debug))
        self.__api_module.append(SocialApi(self._debug))
            
    def __post_user_login(self, method):
        params = {'phone':self.__account, 'pwd':utils.webRsaEncrypt(self.__pwd)}
        code, result = self._post(method=method, token=None, params=params)
        if(code == 200):
            if result['result'] == 1:
                self.login_result_data = result['data']
                for _, v in enumerate(self.__api_module):
                    v.updateLoginResultData(self.login_result_data)
                                    
                logging.debug(self.login_result_data)
                
                return True
            elif result['result'] == 0:
                logging.debug(result['error'])
            else:
                logging.debug(result)
        else:
            logging.debug(code, result)
            
        return False
    
    def __post_upload_getToken(self, method):
        params = {'uid':self.login_result_data['uid'], 'token':self.login_result_data['token_info']['token']}
        code, result = self._post(method=method, token=None, params=params)
        if(code == 200):
            if result['result'] == 1:
                logging.debug(result['data'])
            elif result['result'] == 0:
                logging.debug(result['error'])
            else:
                logging.debug(result)
        else:
            logging.debug(code, result)
                        