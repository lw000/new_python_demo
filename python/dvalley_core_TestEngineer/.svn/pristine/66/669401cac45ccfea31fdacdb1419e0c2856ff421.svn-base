#!/usr/bin/env python
# -*- coding=utf-8 -*-

'''
Created on 2018年05月31日

@author: Administrator
'''

import demjson
import logging
import requests
import grequests
import time
import datetime
import utils
import tester_config  
    
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [pid:%(process)s] %(levelname)s %(message)s %(filename)s[line:%(lineno)d]',
                    datefmt='%Y-%m-%d %H:%M:%S')
   
logger = logging.getLogger(__name__)

# logger.setLevel(logging.DEBUG)
# hdr = logging.StreamHandler()
# formatter = logging.Formatter('%(asctime)s [pid:%(process)s] %(levelname)s %(message)s %(filename)s[line:%(lineno)d]')
# hdr.setFormatter(formatter)
# logger.addHandler(hdr)

def __execpt_handler(req, exception):
    print('Request failed')

def purl(args):
    def _url(func):
        def __url(self, method, usetoken, params):
            date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')     
            t1 = time.time()
            data = func(self, method, usetoken, params)
            t2 = time.time()
            print('%s %s%s %s' % (date, self.host, method, params))
            print('%s %s%s [%f]' % (date, self.host, method, t2-t1))
            return data
        return __url
    return _url
    
class BaseNetApi(object):
    def __init__(self, host, buniss):
        self.__host = host
        self._buniss = buniss
            
    @property
    def host(self):
        return self.__host 
    
    @host.setter               
    def host(self, host):
        self.__host = host
    
    def __prepareParams(self, usetoken, params):
        commonParams = dict(app_version='3.0.1', client_type='pc', lang='1')
        postParams = {}
        postParams.update(commonParams)
               
        if params != None:
            postParams.update(params)
            
        if usetoken:
            postParams['token'] = tester_config.login_result_data['token_info']['token']
        
        while True:
            if self._buniss == tester_config.API_WEB:
                postData = utils.webSignWithJson(demjson.encode(postParams))
            elif self._buniss == tester_config.API_REDBAG:
                postData = utils.redbagSignWithJson(demjson.encode(postParams))
            else:
                break
            
            if postData:
                payload = demjson.decode(postData)
                return payload
            
        return None
    
    @purl('post')
    def post(self, method, usetoken, params):
        url = self.__host + method
        payload = self.__prepareParams(usetoken, params)
        if not payload:
            return -1, {'error':'fail sign'}
        
        r = requests.post(url, data=payload)
            
#         logger.debug(r.headers)
#         logger.debug(r.text)
#         logger.debug(r.json())
            
        if r.status_code == 200:
            result = demjson.decode(r.text)
            code = result['result']
            if result['result'] == 1:
                return (code, result['data'])
            elif code == 0:
                return (code, result['error'])
            else:
                logger.error(result)
                    
            return (code, {'error':r.text})
        else:
            return r.status_code, {'error':r.text}
        
    def batchPost(self, method, token, params, count):     
        rs = []
        for _ in range(count):
            code, data = self._post(method, token, params)
            rs.append((code, data))        
        return rs
     
    @purl('asyncPost')
    def asyncPost(self, method, token, params):
        url = self.host + method    
        payload = self.__prepareParams(token, params)
        
        urls = [url]
        r = (grequests.post(url, data=payload) for u in urls)
        data = grequests.map(r)
                
        for v in data:
            print(v)
            print(v.url)
            print(v.headers)
            print(v.text)
            print(v.json())
                     
        return data
    
    def get(self, url, params): 
        r = requests.get(url, params)
        print(r.url)
        print(r.text)
        
        return r
    